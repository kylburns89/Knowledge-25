<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $http) {
    // Basic variables
    $scope.topics = ['Technology', 'Science', 'Business'];
    $scope.topicIndex = 0;
    $scope.topic = $scope.topics[0];
    $scope.news = {
        title: 'Initializing...',
        content: 'Please wait while we fetch news.',
        source: 'System'
    };
    $scope.newsItems = [];
    $scope.newsIndex = 0;
    $scope.loading = false;
    
    // Logging helper
    function log(msg) {
        gs.info("NewsWidget: " + msg);
    }
    
    // Initialize - fetch first topic news
    $scope.fetchNews = function() {
        $scope.loading = true;
        log("Fetching news for " + $scope.topic);
        
        // Directly set a dummy news item for testing
        $scope.newsItems = [
            {
                title: 'Client: News about ' + $scope.topic,
                content: 'This is a client-generated news item for testing purpose.',
                source: 'Test Source'
            }
        ];
        $scope.news = $scope.newsItems[0];
        
        // Now try to get server data
        $scope.server.get({
            action: 'getNewsForTopic',
            topic: $scope.topic
        }).then(function(response) {
            log("Got server response: " + JSON.stringify(response));
            $scope.loading = false;
            
            if (response && response.newsItems && response.newsItems.length > 0) {
                log("Successfully got " + response.newsItems.length + " items from server");
                $scope.newsItems = response.newsItems;
                $scope.newsIndex = 0;
                $scope.news = $scope.newsItems[0];
            } else {
                log("No valid news items in response");
                // Keep the client-side dummy news item
            }
        }, function(error) {
            log("Error from server: " + error);
            $scope.loading = false;
            // Keep the client-side dummy news item
        });
    };
    
    // Navigation functions
    $scope.next = function() {
        $scope.topicIndex = ($scope.topicIndex + 1) % $scope.topics.length;
        $scope.topic = $scope.topics[$scope.topicIndex];
        $scope.fetchNews();
    };
    
    $scope.prev = function() {
        $scope.topicIndex = ($scope.topicIndex - 1 + $scope.topics.length) % $scope.topics.length;
        $scope.topic = $scope.topics[$scope.topicIndex];
        $scope.fetchNews();
    };
    
    $scope.nextNews = function() {
        if ($scope.newsItems.length > 1) {
            $scope.newsIndex = ($scope.newsIndex + 1) % $scope.newsItems.length;
            $scope.news = $scope.newsItems[$scope.newsIndex];
        }
    };
    
    $scope.prevNews = function() {
        if ($scope.newsItems.length > 1) {
            $scope.newsIndex = ($scope.newsIndex - 1 + $scope.newsItems.length) % $scope.newsItems.length;
            $scope.news = $scope.newsItems[$scope.newsIndex];
        }
    };
    
    $scope.refresh = function() {
        $scope.fetchNews();
    };
    
    // Initial fetch
    $scope.fetchNews();
};]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel {&#13;
  margin-bottom: 20px;&#13;
}&#13;
.panel-heading {&#13;
  padding: 10px 15px;&#13;
}&#13;
.panel-body {&#13;
  padding: 15px;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>Displays rotating news based on user topic preferences using OpenAI's web search</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>openai-news-widget</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>OpenAI News Widget</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    gs.info("OpenAINewsWidget: Server script starting");
    
    // Default data
    data.topics = ['Technology', 'Science', 'Business'];
    data.newsItems = [];
    
    // Process requested action
    if (input && input.action === 'getNewsForTopic' && input.topic) {
        gs.info("OpenAINewsWidget: Getting news for topic: " + input.topic);
        getNewsForTopic(input.topic);
    } else {
        gs.info("OpenAINewsWidget: No action or missing topic");
    }
    
    // Function to get dummy news
    function getNewsForTopic(topic) {
        var items = [
            {
                title: 'News about ' + topic + ' (Item 1)',
                content: 'This is sample content about ' + topic + ' from the server.',
                source: 'Sample Source 1'
            },
            {
                title: 'More about ' + topic + ' (Item 2)',
                content: 'This is another article about ' + topic + ' for testing.',
                source: 'Sample Source 2'
            }
        ];
        
        data.newsItems = items;
        gs.info("OpenAINewsWidget: Returning " + items.length + " news items for " + topic);
        gs.info("OpenAINewsWidget: Data obj: " + JSON.stringify(data));
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-03-19 00:51:46</sys_created_on>
        <sys_id>e54005728358aa1094b111b6feaad386</sys_id>
        <sys_mod_count>26</sys_mod_count>
        <sys_name>OpenAI News Widget</sys_name>
        <sys_package display_value="Knowledge 25 Presentation" source="x_1511177_knowle_0">1f56a5f58354661094b111b6feaad35f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Knowledge 25 Presentation">1f56a5f58354661094b111b6feaad35f</sys_scope>
        <sys_update_name>sp_widget_e54005728358aa1094b111b6feaad386</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-19 03:00:57</sys_updated_on>
        <template><![CDATA[<div>
  <div class="panel panel-default">
    <div class="panel-heading">
      <button class="btn btn-default btn-xs" ng-click="prev()">←</button>
      <span>{{topic}} News</span>
      <button class="btn btn-default btn-xs" ng-click="next()">→</button>
      <button class="btn btn-default btn-xs pull-right" ng-click="refresh()">⟳</button>
    </div>
    <div class="panel-body">
      <p ng-if="loading">Loading...</p>
      <div ng-if="!loading">
        <h4>{{news.title}}</h4>
        <p>{{news.content}}</p>
        <p><small>Source: {{news.source}}</small></p>
        <div>
          <button class="btn btn-default btn-xs" ng-click="prevNews()">Prev</button>
          <button class="btn btn-default btn-xs" ng-click="nextNews()">Next</button>
        </div>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
